<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="false">
	<!--
    vm相关配置：
        必须设置环境变量才有日志输出：-Dspring.profiles.active=dev
        日志级别：logging.level.root=INFO
        Logstash服务地址：logstash.destination=ip:port
        日志文件写入：suqi-center.log2file=true
    -->
	<!--    <contextName>${APP_NAME}</contextName>-->
	<springProperty name="APP_NAME" scope="context" source="spring.application.name"/>
	<springProperty name="LOG_FILE" scope="context" source="logging.file" defaultValue="./logs/${APP_NAME}"/>
	<springProperty name="LOG_MAXFILESIZE" scope="context" source="logback.filesize" defaultValue="100MB"/>
	<springProperty name="LOG_FILEMAXDAY" scope="context" source="logback.filemaxday" defaultValue="7"/>
	<springProperty name="ServerIP" scope="context" source="spring.cloud.client.ip-address" defaultValue="0.0.0.0"/>
	<springProperty name="ServerPort" scope="context" source="server.port" defaultValue="0000"/>
	<springProperty scope="context" name="logstash.destination" source="logstash.destination" defaultValue=""/>
	<springProperty scope="context" name="LOG_LEVEL" source="logging.level.root" defaultValue="INFO"/>
	<define name="pid" class="com.suqi.center.common.logger.NameVarPathMatchDefiner" />
	<define name="hostname" class="com.suqi.center.common.logger.CanonicalHostNamePropertyDefiner"/>

	<!-- 彩色日志 -->
	<!-- 彩色日志依赖的渲染类 -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
	<conversionRule conversionWord="wex"
					converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
	<conversionRule conversionWord="wEx"
					converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

	<!-- 彩色日志格式 -->
	<property name="CONSOLE_LOG_PATTERN"
			  value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%level){blue} %clr(${PID}) %clr([traceCode:%X{traceCode}]){cyan} %clr([traceId:%X{traceId}]){yellow} %clr([%thread]){orange} %clr(%logger){cyan} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
	<property name="CONSOLE_LOG_PATTERN_NO_COLOR"
			  value="[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} %level ${PID} [traceCode:%X{traceCode}] [traceId:%X{traceId}] [%thread] %logger %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

	<!-- 在vm参数配置了logstash服务地址才开启logstash的配置(-Dlogstash.destination=xxx:xxx) -->
	<if condition='!property("logstash.destination").isEmpty()'>
		<then>
			<!--DEBUG日志输出到LogStash-->
			<appender name="PUSH_LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
				<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
					<level>${LOG_LEVEL}</level>
				</filter>
				<destination>${logstash.destination}</destination>
				<encoder charset="UTF-8" class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
					<providers>
						<timestamp>
							<timeZone>Asia/Shanghai</timeZone>
						</timestamp>
						<!--自定义日志输出格式-->
						<pattern>
							<pattern>
								{
								"indexName": "${APP_NAME}",
								"project": "${APP_NAME}",
								"hostname": "${hostname}",
								"traceCode": "%X{traceCode}",
								"traceId": "%X{traceId}",
								"log_level": "%level",
								"timestamp": "%date{\"yyyy-MM-dd'T'HH:mm:ss.SSS\"}",
								"trace": "%X{X-B3-TraceId:-}",
								"span": "%X{X-B3-SpanId:-}",
								"severity": "%level",
								"exportable": "%X{X-Span-Export:-}",
								"pid": "${pid:-}",
								"thread": "%thread",
								"class": "%logger{150}",
								"line_number": "%line",
								"message": "%message",
								"stack_trace": "%exception{20}",
								"elapsed_time": "#asLong{%X{elapsedTime}}"
								}
							</pattern>
						</pattern>
					</providers>
				</encoder>
				<!--当有多个LogStash服务时，设置访问策略为轮询-->
				<connectionStrategy>
					<roundRobin>
						<connectionTTL>5 minutes</connectionTTL>
					</roundRobin>
				</connectionStrategy>
			</appender>
		</then>
	</if>


	<!-- 控制台日志 -->
	<appender name="StdoutAppender" class="ch.qos.logback.core.ConsoleAppender">
		<withJansi>true</withJansi>
		<encoder>
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>
	<!-- 按照每天生成常规日志文件 -->
	<appender name="FileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_FILE}/${APP_NAME}.log</file>
		<encoder>
			<pattern>${CONSOLE_LOG_PATTERN_NO_COLOR}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 基于时间的分包策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_FILE}/${APP_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!--保留时间,单位:天-->
			<maxHistory>${LOG_FILEMAXDAY}</maxHistory>
			<maxFileSize>${LOG_MAXFILESIZE}</maxFileSize>
		</rollingPolicy>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>${LOG_LEVEL}</level>
		</filter>
	</appender>
	<appender name="file_async" class="ch.qos.logback.classic.AsyncAppender">
		<discardingThreshold>0</discardingThreshold>
		<appender-ref ref="FileAppender"/>
	</appender>



	<!-- MyBatis log configure -->
	<!--    <logger name="com.apache.ibatis" level="INFO"/>-->
	<!--    <logger name="org.mybatis.spring" level="DEBUG"/>-->
	<!--    <logger name="java.sql.Connection" level="DEBUG"/>-->
	<!--    <logger name="java.sql.Statement" level="DEBUG"/>-->
	<!--    <logger name="java.sql.PreparedStatement" level="DEBUG"/>-->
	<logger name="org.hibernate.validator.internal.util.Version" level="off" />


	<springProfile name="local,dev,test,uat,prod,docker">
		<root level="${LOG_LEVEL}">
			<if condition='property("suqi-center.log2console").contains("false")'>
				<then>
					<!-- 不打印 -->
				</then>
				<else>
					<appender-ref ref="StdoutAppender"/>
				</else>
			</if>
			<if condition='property("suqi-center.log2file").contains("true")'>
				<then>
					<!-- 文件打印 -->
					<appender-ref ref="file_async"/>
				</then>
			</if>
			<if condition='!property("logstash.destination").isEmpty()'>
				<then>
					<!-- 日志输出到logstash -->
					<appender-ref ref="PUSH_LOGSTASH" />
				</then>
			</if>
		</root>
	</springProfile>

</configuration>
